breakdown$symbol<-ifelse(breakdown$pvalue<=0.01,'***',
ifelse(breakdown$pvalue<=0.05,'**',
ifelse(breakdown$pvalue<=0.1,'*','')))
breakdown$sign<-ifelse(breakdown$diff<0,'depletion' ,'enrichment')
return(breakdown)
} # runs fisher test for enrichment on each category
plot_breakdown_with_counts2<-function(breakdown,dat){
level<-colnames(dat)[1]
add_counts<-melt(dat,variable.name = 'comp',value.name = 'freq')
breakdown_w_counts<-merge(breakdown,add_counts, by.y=c('comp',level), by.x=c('comp','categories'),all=T)
breakdown_w_counts$freq[!(breakdown_w_counts$comp %in% c('Pan')) & breakdown_w_counts$pvalue>0.1] <- NA
tot<-aggregate(data=breakdown_w_counts,freq~comp,FUN='sum')
colnames(tot)[2]='tot'
breakdown_w_counts<-merge(breakdown_w_counts,tot,by='comp',all.x=T)
breakdown_w_counts$relfreq<-paste(round(breakdown_w_counts$freq/breakdown_w_counts$tot*100),'%')
breakdown_w_counts$relfreq[breakdown_w_counts$relfreq =='NA %'] <- NA
breakdown_w_counts$symbol[breakdown_w_counts$comp =='moderate'] <- NA
breakdown_w_counts$sign[breakdown_w_counts$comp =='moderate'] <- NA
breakdown_w_counts$diff[breakdown_w_counts$comp =='moderate'] <- NA
plot<-ggplot(data=subset(breakdown_w_counts,comp!='Pan'))+
geom_point(aes(x=comp,y=categories,fill=sign,size=abs(diff),alpha=pvalue),shape=21,color='grey')+
scale_x_discrete(limits = levels(dat$comp)) +
scale_fill_manual(name="",breaks=c("depletion", "enrichment"), values =c( "lightblue", "#EC7063")) +
scale_size_continuous(range=c(5,20),breaks=c(5,20,50,75,100))+
scale_alpha_continuous(range=c(1,0.2), limits=c(0,0.1), na.value = 0,breaks=c(0,0.01,0.05,0.1,1),guide=FALSE)+
geom_text(aes(x=comp,y=categories,label=symbol),vjust=-0.5)+
geom_text(aes(x=comp,y=categories,label=freq),vjust=0.5)+
geom_text(aes(x=comp,y=categories,label=relfreq),hjust=-1)+
theme_bw() +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=60,hjust=1))
return(plot)
}
recombining_genes= read.table('core_genes_with_recomb_AICc.txt',header=F)$V1
recombining_genes
seed<-read.csv('SEED_annotations_all.txt',header=T,sep='\t', na.strings = '',stringsAsFactors = T)
seed<-read.csv('./SEED_annotations_all.txt',header=T,sep='\t', na.strings = '',stringsAsFactors = T)
seed<-read.csv('./SEED_annotations_all.tsv',header=T,sep='\t', na.strings = '',stringsAsFactors = T)
seed=seed[,c("locus_tag","SEED_level_1","SEED_level_2","SEED_level_3" ,"SEED_long_name")]
colnames(seed)[1]='gene_id'
seed = seed[!duplicated(seed),]
pval_thresh=0.05
core_sel=read.table(paste0('./absrel_results_pval_',pval_thresh,'.txt'),header=T,sep='\t',row.names = 1)
colSums(core_sel)
core_sel$gene_id=rownames(core_sel)
core_sel=subset(core_sel, !(gene_id %in% recombining_genes)) # remove recombining genes
colSums(core_sel[,-ncol(core_sel)])
core_sel=merge(core_sel,seed,by = 'gene_id',all.x=T)
# core_sel$All<-1
head(core_sel)
nrow(core_sel)
core_orth=read.table('./Orthology_id35cov51_nopseudo.txt',header=T,sep='\t',row.names=1)
core_orth %>% head
core_orth=core_orth[core_orth$Count==17,] # Keep only Core orthologs
core_orth=core_orth[!(grepl('_R', core_orth$R.magnifica)),] # remove core RNA genes
nrow(core_orth) # # of non -pseudo core genes
core_orth$gene_id<-core_orth$R.magnifica
core_orth= subset(core_orth, !(gene_id %in% recombining_genes)) # remove recombining genes
core_orth %>% nrow
core_orth$Core=1
core_orth=core_orth[,c('gene_id','Core')]
core_orth
core_orth[setdiff(colnames(core_sel),colnames(core_orth))[1:38]]<-0
seed %>% nrow
core_orth %>% nrow
core_orth %>% head
seed %>% head
core_orth=merge(core_orth,seed,by = 'gene_id',all.x=T) %>% unique(.)
core_orth %>% tail()
colnames(core_orth)
colnames(core_sel)
core_orth[,c("gene_id","Core","SEED_level_1","SEED_level_2","SEED_level_3" ,"SEED_long_name")] %>% colnames()
df = merge(core_orth[,c("gene_id","Core","SEED_level_1","SEED_level_2","SEED_level_3" ,"SEED_long_name")],core_sel,by=c('gene_id','SEED_level_1', 'SEED_level_2','SEED_level_3','SEED_long_name'),all=T)
df %>% colnames()
colnames(df)[9]='Sym'
colnames(df)[12]='FL'
df$allbranches=rowSums(df[,c('a','b','c')])
df=df[,c('gene_id',"Core", "All", "All.groups", "Sym", "Gigas", "Ruthia",
"FL", "allbranches", "a", "b", "c", "d", "e", "f", "g", "h",
"i", "j", 'k','l','m','n', "R.magnifica", "R.pacifica", "R.phaseoliformis", "R.pliocardia",
"R.rectimargo","R.fausta", "R.southwardae", "V.gigas1","V.gigas2", "V.okutanii",  "V.soyoae1", "V.soyoae2","V.marissinica","Bathy","SUP05", "SEED_level_1","SEED_level_2","SEED_level_3","SEED_long_name")]
count_cols=c("Core", "All", "All.groups", "Sym", "Gigas", "Ruthia",
"FL", "allbranches", "a", "b", "c", "d", "e", "f", "g", "h",
"i", "j", 'k','l','m','n', "R.magnifica", "R.pacifica", "R.phaseoliformis", "R.pliocardia", "R.rectimargo","R.fausta", "R.southwardae", "V.gigas1","V.gigas2", "V.okutanii",  "V.soyoae1", "V.soyoae2","V.marissinica","Bathy","SUP05")
df[count_cols][is.na(df[count_cols])] <-0
df
df_events=df
df=df_events
df[count_cols][df[count_cols]>0] <-1 # reduce df to presence/absence
# df[!is.na(df$'SEED_level_1') & df[, 'SEED_level_1']=='',c('SEED_level_1')]<-
df %>% head()
print("Selection gene count summary")
summary=df[,c('gene_id',"Core", "All", "All.groups", "Gigas", "Ruthia",
"FL", "allbranches", "a", "b", "c",'Bathy','SUP05')] %>% unique
print(colSums(summary[,-1]))
print("Selection events count summary")
summary=df_events[,c("gene_id", "a", "b", "c", "d", "e", "f", "g", "h",
"i", "j", 'k','l','m','n', "R.magnifica", "R.pacifica", "R.phaseoliformis", "R.pliocardia","R.rectimargo","R.fausta", "R.southwardae", "V.gigas1","V.gigas2", "V.okutanii",  "V.soyoae1", "V.soyoae2","V.marissinica","Bathy","SUP05")] %>% unique
print(colSums(summary[,-1]))
### Genes selected multiple times throughout the phylogeny
rep_sel=subset(df_events,All>1)
rep_sel$gene_id %>% unique %>% length
### Genes selected multiple times throughout the symbiont phylogeny
rep_sel=subset(df_events,Sym>1 )
rep_sel$gene_id %>% unique %>% length
df$SymMulti<-as.numeric(df$gene_id %in% (rep_sel$gene_id %>% unique))
get_non_empty_column <- function(x){
if(is.numeric(x)){
sum(x) >0
} else {
TRUE
}
}
df =df[, sapply(df,  get_non_empty_column)]
```
## Run enrichment tests
### SEED_level_1
```{r run tests and format data frame for figure}
# #### 1) run hypergeometric montecarlo test ####
pval<-run_multihypergeometric_montecarlo_tests(df,'SEED_level_1')
dd = df[!duplicated(df[,c("gene_id",'Core',"SEED_level_1")]),]
dd$SEED_level_1 <- factor(dd$SEED_level_1, levels = levels(addNA(dd$SEED_level_1)), labels = c(levels(dd$SEED_level_1), 'NA'), exclude = NULL)
dd[,c(-1,-length(colnames(dd)))][is.na(dd[,c(-1,-length(colnames(dd)))])] <-0
d<-aggregate(.~SEED_level_1,dd,FUN = function(x) {sum(x > 0, na.rm = F)}, na.action = na.pass)
colSums(d[,-1])
row.names(d)<-d$SEED_level_1
d=d[setdiff(colnames(d), c("gene_id",'SEED_level_2',"SEED_level_3","SEED_long_name"))]
colnames(d) %in% list(colSums(d[,-1])<2)
d=cbind('SEED_level_1'=d[,1],d[,2:ncol(d)][,colSums(d[,2:ncol(d)]) > 1])
breakdown<-run_fisher_tests2(d)
core_lvl_order<-d[order(d$Core),]$SEED_level_1
core_lvl_order<-union(core_lvl_order[core_lvl_order!='NA'],'NA')
d$SEED_level_1 <- factor(d$SEED_level_1,levels = core_lvl_order)
dat<-melt(d)
colnames(dat)[1]='categories'
colnames(dat)[2]='comp'
colnames(dat)[3]='count'
dat<-merge(breakdown,dat,by=c('categories','comp'),all=T)
dat$categories <- factor(dat$categories,levels =core_lvl_order)
dat$sign[dat$pvalue>=0.05] <- 'NS'
dat$symbol[is.na(dat$symbol)] <- ''
tot<-aggregate(count~comp,dat, function(x) sum(x))
colnames(tot)[2]='tot'
dat<-merge(dat,tot, by=c('comp'),all=T)
head(dat)
dput(levels(dat$comp))
dat$comp <- factor(dat$comp,levels = c( "SymMulti","All", "Sym",  "FL", "Ruthia","Gigas",
"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", 'k','l','m','n',"Bathy",
"SUP05","R.magnifica", "R.pacifica", "R.phaseoliformis", "R.pliocardia",
"R.rectimargo", "R.fausta", "R.southwardae", "V.gigas1", "V.gigas2",
"V.okutanii", "V.soyoae1", "V.soyoae2", "V.marissinica","All.groups","allbranches","Core"))
Group_labels=c("SymMulti","All", "Sym", "FL", "Clade II", "Clade I", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", 'k','l','m','n',"Bathy", "SUP05","R.magnifica", "R.pacifica", "R.phaseoliformis", "R.pliocardia",
"R.rectimargo", "R.fausta", "R.southwardae", "V.gigas1", "V.gigas2",
"V.okutanii", "V.soyoae1", "V.soyoae2", "V.marissinica","All.groups","allbranches","Core")
names(Group_labels)=c( "All", "Sym",  "FL", "Ruthia","Gigas",
"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", 'k','l','m','n',"Bathy",
"SUP05","R.magnifica", "R.pacifica", "R.phaseoliformis", "R.pliocardia",
"R.rectimargo", "R.fausta", "R.southwardae", "V.gigas1", "V.gigas2",
"V.okutanii", "V.soyoae1", "V.soyoae2", "V.marissinica","All.groups","allbranches","Core")
dat
dat
dat
```
### SEED_level_2
```{r run tests and format data frame for figure}
plot_Core<-ggplot(subset(dat,(comp %in% c('Core'))))+
theme_bw()+
geom_bar(aes(y=count,x=categories),fill='grey20',stat='identity',color='black')+
geom_bar(data=subset(dat,(comp %in% c('All.groups'))), aes(y=count,x=categories),fill='grey50',stat='identity',color='black')+
scale_y_continuous(limits=c(0,122),
breaks=c(seq(0,50,25),seq(50,125,25)),
position='left',
sec.axis = sec_axis(~./subset(dat,(comp %in% c('Core')))$tot*100, name = 'Relative abundance (%)',breaks=c(seq(0,75,5))))+
coord_flip()+
labs( x = "SEED categories", y='Gene count in core genome')+
theme(axis.title.x = element_text(size=8)
# axis.text.x.bottom = element_text(angle=50,vjust=1,hjust = 1)
)
plot_Core
plot_multi<-ggplot(subset(dat,(comp %in% c('SymMulti'))))+
theme_bw()+
geom_bar(aes(y=count,x=categories,fill=sign),stat='identity',color='black')+
scale_y_continuous(limits=c(0,max(subset(dat,(comp %in% c('SymMulti')))$count)),
breaks=c(seq(0,10,2),seq(10,20,5)),
minor_breaks = c(seq(0,10,1),seq(10,20,2.5)),
position='left',
sec.axis = sec_axis(~./subset(dat,(comp %in% c('a')))$tot*100, name = 'Relative abundance (%)',breaks=c(seq(0,25,5))))+
# scale_fill_gradient2(low = "blue", high = "red", mid = 'grey20',na.value= 'grey20',limits=c(-0.5, 0.5), oob=squish)+
scale_fill_manual(values=c('depletion'='blue','enrichment'='red','NS'='grey50'))+
coord_flip()+
labs( x = "SEED categories", y='Gene count in a')+
theme(axis.title.x = element_text(size=8))
plot_multi
plot_FL<-ggplot(subset(dat,(comp %in% c('FL'))))+
theme_bw()+
geom_bar(aes(y=count,x=categories,fill=sign),stat='identity',color='black')+
scale_y_continuous(limits=c(0,max(subset(dat,(comp %in% c('FL')))$count)),
breaks=c(seq(0,max(subset(dat,(comp %in% c('FL')))$count),2)),
minor_breaks = c(seq(0,10,1)),
position='left',
sec.axis = sec_axis(~./subset(dat,(comp %in% c('FL')))$tot*100, name = 'Relative abundance (%)',breaks=c(seq(0,25,5))))+
scale_fill_manual(values=c('depletion'='blue','enrichment'='red','NS'='grey50','NA'='white'))+
coord_flip()+
labs( x = "SEED categories", y='Gene count in Free-living')+
theme(axis.title.x = element_text(size=8))
plot_FL
plot_Ruthia<-ggplot(subset(dat,(comp %in% c('Ruthia'))))+
theme_bw()+
geom_bar(aes(y=count,x=categories,fill=sign),stat='identity',color='black')+
scale_y_continuous(limits=c(0,max(subset(dat,(comp %in% c('Ruthia')))$count)),
breaks=c(seq(0,20,2)),
position='left',
sec.axis = sec_axis(~./unique(subset(dat,(comp %in% c('Ruthia')))$tot)*100, name = 'Relative abundance (%)',breaks=c(seq(0,25,5))))+
# scale_fill_gradient2(low = "blue", high = "red", mid = 'grey20',na.value= 'grey20',limits=c(-0.5, 0.5), oob=squish)+
scale_fill_manual(values=c('depletion'='blue','enrichment'='red','NS'='grey50'))+
coord_flip()+
labs( x = "SEED categories", y='Gene count in Clade II')+
theme(axis.title.x = element_text(size=8))
plot_Ruthia
plot_Gigas<-ggplot(subset(dat,(comp %in% c('Gigas'))))+
theme_bw()+
geom_bar(aes(y=count,x=categories,fill=sign),stat='identity',color='black')+
scale_y_continuous(limits=c(0,max(subset(dat,(comp %in% c('Gigas')))$count)),
breaks=c(seq(0,max(subset(dat,(comp %in% c('Gigas')))$count),1)),
position='left',
sec.axis = sec_axis(~./unique(subset(dat,(comp %in% c('Gigas')))$tot)*100, name = 'Relative abundance (%)',breaks=c(seq(0,25,5))))+
# scale_fill_gradient2(low = "blue", high = "red", mid = 'grey20',na.value= 'grey20',limits=c(-0.5, 0.5), oob=squish)+
scale_fill_manual(values=c('depletion'='blue','enrichment'='red','NS'='grey50'))+
coord_flip()+
labs( x = "SEED categories", y='Gene count in Clade I')+
theme(axis.title.x = element_text(size=8))
plot_Gigas
#### here ####
plot_Sym<-ggplot(subset(dat,(comp %in% c('Sym'))))+
theme_bw()+
geom_bar(aes(y=count,x=categories,fill=sign),stat='identity',color='black')+
scale_y_continuous(limits=c(0,max(subset(dat,(comp %in% c('Sym')))$count)),
breaks=c(seq(0,10,1),seq(10,25,5)),
position='left',
sec.axis = sec_axis(~./unique(subset(dat,(comp %in% c('Sym')))$tot)*100, name = 'Relative abundance (%)',breaks=c(seq(0,25,5))))+
# scale_fill_gradient2(low = "blue", high = "red", mid = 'grey20',na.value= 'grey20',limits=c(-0.5, 0.5), oob=squish)+
scale_fill_manual(values=c('depletion'='blue','enrichment'='red','NS'='grey50'))+
coord_flip()+
labs( x = "SEED categories", y='Gene count in Sym')+
theme(axis.title.x = element_text(size=8))
plot_Sym
plot1<-grid.arrange(arrangeGrob(plot_Core+theme(plot.margin=unit(c(1,0.5,0,0), "cm")),
plot_FL+theme(legend.position="none",
axis.text.y = element_blank(),
axis.title.y= element_blank(),
plot.margin=unit(c(1,0,0,0), "cm")),
plot_Ruthia+theme(legend.position="none",
axis.text.y = element_blank(),
axis.title.y= element_blank(),
plot.margin=unit(c(1,0,0,0), "cm")),
plot_Gigas+theme(legend.position="none",
axis.text.y = element_blank(),
axis.title.y= element_blank(),
plot.margin=unit(c(1,0.5,0,0), "cm")),
nrow=1,widths=c(3.6,1,1,1)))
plot1
plot_Core<-ggplot(subset(dat,(comp %in% c('Core'))))+
theme_bw()+
geom_bar(aes(y=count,x=categories),fill='grey20',stat='identity',color='black')+
geom_bar(data=subset(dat,(comp %in% c('allbranches'))),aes(y=count,x=categories),fill='grey50',stat='identity',color='black')+
scale_y_continuous(limits=c(0,122),
breaks=c(seq(0,125,25)),
minor_breaks = c(seq(0,50,10)),
position='left',
sec.axis = sec_axis(~./subset(dat,(comp %in% c('Core')))$tot*100, name = 'Relative abundance (%)',breaks=c(seq(0,25,5))))+
coord_flip()+
labs( x = "SEED categories", y='Gene count in core genome')+
theme(axis.title.x = element_text(size=8)
# axis.text.x.bottom = element_text(angle=50,vjust=1,hjust = 1)
)
plot_Core
plot_a<-ggplot(subset(dat,(comp %in% c('a'))))+
theme_bw()+
geom_bar(aes(y=count,x=categories,fill=sign),stat='identity',color='black')+
scale_y_continuous(limits=c(0,max(subset(dat,(comp %in% c('a')))$count)),
breaks=c(seq(0,10,2),seq(10,20,5)),
minor_breaks = c(seq(0,10,1),seq(10,20,2.5)),
position='left',
sec.axis = sec_axis(~./subset(dat,(comp %in% c('a')))$tot*100, name = 'Relative abundance (%)',breaks=c(seq(0,25,5))))+
# scale_fill_gradient2(low = "blue", high = "red", mid = 'grey20',na.value= 'grey20',limits=c(-0.5, 0.5), oob=squish)+
scale_fill_manual(values=c('depletion'='blue','enrichment'='red','NS'='grey50'))+
coord_flip()+
labs( x = "SEED categories", y='Gene count in a')+
theme(axis.title.x = element_text(size=8))
plot_a
plot_b<-ggplot(subset(dat,(comp %in% c('b'))))+
theme_bw()+
geom_bar(aes(y=count,x=categories,fill=sign),stat='identity',color='black')+
scale_y_continuous(limits=c(0,max(subset(dat,(comp %in% c('b')))$count)),
breaks=c(seq(0,10,2),seq(10,25,5)),
position='left',
sec.axis = sec_axis(~./unique(subset(dat,(comp %in% c('b')))$tot)*100, name = 'Relative abundance (%)',breaks=c(seq(0,25,5))))+
# scale_fill_gradient2(low = "blue", high = "red", mid = 'grey20',na.value= 'grey20',limits=c(-0.5, 0.5), oob=squish)+
scale_fill_manual(values=c('depletion'='blue','enrichment'='red','NS'='grey50'))+
coord_flip()+
labs( x = "SEED categories", y='Gene count in b')+
theme(axis.title.x = element_text(size=8))
plot_b
plot_c<-ggplot(subset(dat,(comp %in% c('c'))))+
theme_bw()+
geom_bar(aes(y=count,x=categories,fill=sign),stat='identity',color='black')+
scale_y_continuous(limits=c(0,max(subset(dat,(comp %in% c('c')))$count)),
breaks=c(seq(0,5,1)),
position='left',
sec.axis = sec_axis(~./unique(subset(dat,(comp %in% c('c')))$tot)*100, name = 'Relative abundance (%)',breaks=c(seq(0,25,5))))+
# scale_fill_gradient2(low = "blue", high = "red", mid = 'grey20',na.value= 'grey20',limits=c(-0.5, 0.5), oob=squish)+
scale_fill_manual(values=c('depletion'='blue','enrichment'='red','NS'='grey50'))+
coord_flip()+
labs( x = "SEED categories", y='Gene count in c')+
theme(axis.title.x = element_text(size=8))
plot_c
plot2<-grid.arrange(arrangeGrob(plot_Core+theme(plot.margin=unit(c(0.5,0.5,1,0), "cm")),
arrangeGrob(
plot_a+theme(legend.position="none",
axis.text.y = element_blank(),
axis.title.y= element_blank(),
plot.margin=unit(c(0.5,0,1,0), "cm")),
plot_b+theme(legend.position="none",
axis.text.y = element_blank(),
axis.title.y= element_blank(),
plot.margin=unit(c(0.5,0,1,0), "cm")),
plot_c+theme(legend.position="none",
axis.text.y = element_blank(),
axis.title.y= element_blank(),
plot.margin=unit(c(0.5,0.5,1,0), "cm")),
nrow=1,widths=c(1,1,1)),nrow=1,widths=c(1.2,0.99)))
plot2
plot2
```{r mount Selection composite figure}
plot_Selection<-grid.arrange(plot1,plot2,nrow=2,ncol=1)
plot_Selection
subset(df,All==1 & !(is.na(SEED_level_1)))$gene_id %>% unique %>% length
plot_Selection
plot_Selection<-grid.arrange(plot1,plot2,nrow=2,ncol=1)
plot_Selection
# Import list of genes with significant evidence for recombinaiton according to the AICc test.
recombining_genes= read.table('core_genes_with_recomb_AICc.txt',header=F)$V1
recombining_genes
# Import SEED annotations for all genes
seed<-read.csv('./SEED_annotations_all.txt',header=T,sep='\t', na.strings = '',stringsAsFactors = T)
seed=seed[,c("locus_tag","SEED_level_1","SEED_level_2","SEED_level_3" ,"SEED_long_name")]
colnames(seed)[1]='gene_id'
seed = seed[!duplicated(seed),]
pval_thresh=0.05
relax=read.table('./relax_results.txt',header=T,sep='\t')
relax=data.table::as.data.table(relax)
relax=subset(relax,!(gene %in% recombining_genes)) # remove genes with evidence of recombination
nrow(relax)
core_relax=relax[,c(1,2)] %>% unique
nrow(core_relax)
core_relax$branches='Core'
core_relax$k=999
core_relax$pval=0
long=data.table::melt(relax,id.vars=c('gene','ncodons'),
measure.vars = patterns("_k", "_pval"),
variable.name = 'branches',
value.name=c('k','pval'),
variable.factor = T)
levels(long$branches)<-c("SymvsFL","RuvsFL","GivsFL","GivsRu")
long=rbind(core_relax,long)
colnames(long)[1]='gene_id'
df_rel=merge(long,seed,by = 'gene_id',all.x=T) %>% unique(.)
df_rel<-subset(df_rel, pval<pval_thresh)
knitr::opts_chunk$set(echo = TRUE)
# setwd("~/Desktop/codon_usage/")
setwd("./")
setwd("~/Desktop/VesicSymb_Evolution/dowstream_analyses_and_data/")
library('ggplot2')
library('gridExtra')
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(grid)
require(gtable)
library('scales')
library(rsvg)
library(magick)
require('cowplot')
theme_set(theme_cowplot())
library(data.table)
recombining_genes=read.table('core_genes_with_recomb_AICc.txt')$V1
pseudogenes = read.table('./pseudogenes.txt')$V1
length(pseudogenes)
relax=read.table('./relax_results.txt',header=T,sep='\t')
relax=as.data.table(relax)
core_nopseudo=relax$gene
nrow(relax)
head(relax)
relax=subset(relax,!(gene %in% recombining_genes)) # remove genes with evidence of recombination
nrow(relax)
head(relax)
relax2<-data.table::melt(relax,id.vars=c('gene','ncodons'),
measure.vars = patterns("_k", "_pval"),
variable.name = 'comp',
value.name=c('k','pval'),
variable.factor = T)
levels(relax2$comp)<-c('SymvsFL','RuvsFL','GivsFL','GivsRu')
df_all=read.csv('codonbias_results.csv',sep='\t',row.names = 1,header=T,na.strings = '')
df_all$ispseudo<-as.numeric(df$locus_tag %in% pseudogenes)
df_all$Group<-ifelse(df_all$Genome %in% c('Bathy','SUP05'),'FL',
ifelse(df_all$Genome %in% c('V.okutanii','V.soyoae1','V.soyoae2','V.diagonalis','V.extenta','V.gigas1','V.gigas2','V.marissinica'),'Gigas','Ruthia'))
colnames(df_all)
df=df_all[,-c(14:ncol(df_all)-3)]
head(df)
subset(df, !(coregene_id %in% recombining_genes ))$coregene_id %>% unique %>% length
df_nopseudo=subset(df,ispseudo==0)
# write.table(df_nopseudo,'codonbias_results_nopseudo.txt',quote=F,row.names=F,sep='\t')
df2=cbind(df_all[,grepl( "RSCU" , names( df_all ) ) ],df_all[,c('Genome','ncodons','Group','ispseudo','coregene_id','locus_tag','ortho_id')])
df_all%>% colnames
df2
df2 %>% head
melt(df2)
rscu=melt(df2)
rscu
subset(rscu,variable %in% c('RSCU.TGA'))
subset(rscu,variable %in% c('RSCU.UCA'))
subset(rscu,variable %in% c('RSCU.AAA'))
subset(rscu,variable %in% c('RSCU.AAA.'))
subset(rscu,variable %in% c('RSCU.TGA.'))
subset(rscu,variable %in% c('RSCU.TCT.'))
subset(rscu,variable %in% c('RSCU.TCA.'))
subset(rscu,variable %in% c('RSCU.TCA.','RSCU.TCC.','RSCU.AGC.'))
ggplot2(subset(rscu,variable %in% c('RSCU.TCA.','RSCU.TCC.','RSCU.AGC.')))+
geom_point(aes(x=value,y=Genome,color=variable))
ggplot(subset(rscu,variable %in% c('RSCU.TCA.','RSCU.TCC.','RSCU.AGC.')))+
geom_point(aes(x=value,y=Genome,color=variable))
ggplot(subset(rscu,variable %in% c('RSCU.TCA.','RSCU.TCC.','RSCU.AGC.')))+
geom_violin(aes(x=value,y=variable))
ggplot(subset(rscu,variable %in% c('RSCU.TCA.','RSCU.TCC.','RSCU.AGC.')))+
geom_violin(aes(x=value,y=variable))+
facet_wrap(~Genome)
ggplot(subset(rscu,variable %in% c('RSCU.TCA.','RSCU.TCC.','RSCU.AGC.')))+
geom_violin(aes(x=value,y=Genome))+
facet_wrap(~variable)
ggplot(subset(rscu,variable %in% c('RSCU.TCA.','RSCU.TCC.','RSCU.AGC.')))+
geom_violin(aes(x=value,y=Genome))+
geom_point(aes(x=value,y=Genome))+
facet_wrap(~variable)
ggplot(subset(rscu,variable %in% c('RSCU.TCA.','RSCU.TCC.','RSCU.AGC.')))+
geom_violin(aes(x=value,y=Genome))+
geom_point(aes(x=value,y=Genome),size=1)+
facet_wrap(~variable)
ggplot(subset(rscu,variable %in% c('RSCU.TCA.','RSCU.TCC.','RSCU.AGC.')))+
geom_violin(aes(x=value,y=Genome))+
geom_jitter(aes(x=value,y=Genome),size=1)+
facet_wrap(~variable)
ggplot(subset(rscu,variable %in% c('RSCU.TCA.','RSCU.TCC.','RSCU.AGC.')))+
geom_violin(aes(x=value,y=Genome))+
geom_jitter(aes(x=value,y=Genome),size=1, alpha=0.1)+
facet_wrap(~variable)
ggplot(subset(rscu,variable %in% c('RSCU.TCA.','RSCU.TCC.','RSCU.AGC.')))+
geom_violin(aes(x=value,y=Genome))+
geom_jitter(aes(x=mean(value),y=Genome),size=1, alpha=0.1)+
facet_wrap(~variable)
ggplot(subset(rscu,variable %in% c('RSCU.TCA.','RSCU.TCC.','RSCU.AGC.')))+
geom_violin(aes(x=value,y=Genome))+
geom_jitter(aes(x=value,y=Genome),size=1, alpha=0.1)+
facet_wrap(~variable)
ggplot(subset(rscu,variable %in% c('RSCU.TCA.','RSCU.TCC.','RSCU.AGC.','RSCU.TCG.','RSCU.AGT.','RSCU.TCT.')))+
geom_violin(aes(x=value,y=Genome))+
geom_jitter(aes(x=value,y=Genome),size=1, alpha=0.1)+
facet_wrap(~variable)
ggplot(subset(rscu,variable %in% c('RSCU.TGA.','RSCU.GGA.','RSCU.GCT.','RSCU.GGA.','RSCU.ACT.','RSCU.AGA.')))+
geom_violin(aes(x=value,y=Genome))+
geom_jitter(aes(x=value,y=Genome),size=1, alpha=0.1)+
facet_wrap(~variable)
df2 %>% head
df %>% head
df_all %>% head
ggplot(df_all)+
geom_point(aes(x=Expected.S, y=Observed.S,color=Group))
ggplot(df_all)+
geom_point(aes(x=Expected.Ser, y=Observed.Ser,color=Group))
ggplot(df_all)+
geom_point(aes(x=Expected.Ser, y=Observed.Ser,color=Group),size=1)
ggplot(df_all)+
geom_density_2d(aes(x=Expected.Ser, y=Observed.Ser,color=Group),size=1)
ggplot(df_all)+
geom_density_2d(aes(x=Expected.TGA, y=Observed.TGA,color=Group),size=1)
df_all %>% head
ggplot(df_all)+
geom_density_2d(aes(x=Expected.TGA, y=Observed.TGA,color=Group),size=1)
ggplot(df_all)+
geom_density_2d(aes(x=Expected.TCA, y=Observed.TCA,color=Group),size=1)
ggplot(df_all)+
geom_density_2d(aes(x=Expected.TCA, y=Observed.TCA,color=Genome),size=1)
ggplot(df_all)+
geom_density_2d(aes(x=Expected.TCA, y=Observed.TCA,color=Genome),size=1)+facet_wrap(~Group)
ggplot(df_all)+
geom_density_2d(aes(x=Expected.TCA, y=Observed.TCA,color=Genome),size=1)+
geom_abline(slope = 1,intercept = 0)+
facet_wrap(~Group)
ggplot(df_all)+
geom_density_2d(aes(y=Expected.TCA/Observed.TCA,x=Genome),size=1)+
geom_abline(slope = 1,intercept = 0)+
facet_wrap(~Group)
ggplot(df_all)+
geom_point(aes(y=Expected.TCA/Observed.TCA,x=Genome),size=1)+
facet_wrap(~Group)
ggplot(df_all)+
geom_violin(aes(y=Expected.TCA/Observed.TCA,x=Genome),size=1)+
facet_wrap(~Group)
ggplot(df_all)+
geom_violin(aes(y=Expected.TCA/Observed.TCA,x=Genome),size=1)
ggplot(df_all)+
geom_violin(aes(y=Expected.TCA/Observed.TCA,x=Genome),size=1)+
scale_y_log10()
