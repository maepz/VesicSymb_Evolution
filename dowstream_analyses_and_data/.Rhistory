axis.title.y= element_blank(),
plot.margin=unit(c(0.5,0.5,1,0), "cm")),
nrow=1,widths=c(1,1,1)),nrow=1,widths=c(1.2,0.99)))
plot2
t4<-subset(df,SEED_level_1 %in% c('Sulfur Metabolism') & c>0 ) %>% .[!duplicated(.[,c('gene_id')]),]
t4
df
t4<-subset(df,SEED_level_1 %in% c('Sulfur Metabolism') & All>0 ) %>% .[!duplicated(.[,c('gene_id')]),]
t4
# Import list of genes with significant evidence for recombinaiton according to the AICc test.
recombining_genes= read.table('core_genes_with_recomb_AICc.txt',header=F)$V1
recombining_genes
# Import SEED annotations for all genes
seed<-read.csv('./SEED_annotations_all.txt',header=T,sep='\t', na.strings = '',stringsAsFactors = T)
seed=seed[,c("locus_tag","SEED_level_1","SEED_level_2","SEED_level_3" ,"SEED_long_name")]
colnames(seed)[1]='gene_id'
seed = seed[!duplicated(seed),]
pval_thresh=0.05
relax=read.table('./relax_results.txt',header=T,sep='\t')
relax=data.table::as.data.table(relax)
relax=subset(relax,!(gene %in% recombining_genes)) # remove genes with evidence of recombination
nrow(relax)
core_relax=relax[,c(1,2)] %>% unique
nrow(core_relax)
core_relax$branches='Core'
core_relax$k=999
core_relax$pval=0
long=data.table::melt(relax,id.vars=c('gene','ncodons'),
measure.vars = patterns("_k", "_pval"),
variable.name = 'branches',
value.name=c('k','pval'),
variable.factor = T)
levels(long$branches)<-c("SymvsFL","RuvsFL","GivsFL","GivsRu")
long=rbind(core_relax,long)
colnames(long)[1]='gene_id'
df_rel=merge(long,seed,by = 'gene_id',all.x=T) %>% unique(.)
df_rel<-subset(df_rel, pval<pval_thresh)
head(df_rel)
subset(df_rel, branches != 'Core' & pval<0.05 & k>1)$gene_id %>% unique
groups<-c('SymvsFL','RuvsFL','GivsFL')
new_rows<-subset(df_rel,branches != 'Core' & pval<0.05 & k>1) %>% .[!duplicated(.[,c('gene_id','SEED_level_1','SEED_level_2','SEED_level_3','SEED_long_name','k')]),]
new_rows$gene_id %>% unique
new_rows$branches<-'SymbAll'
new_rows$k<-999
new_rows$pval<-0
nrow(new_rows)
df_intens = rbind(df_rel,new_rows)
d<-dcast(subset(df_intens,(!is.na(SEED_level_1) | is.na(SEED_long_name)) & (k>1 | k==999)),SEED_level_1~branches, value.var= 'gene_id', function(x) length(unique(x)))
d
colSums(d[,-1])
print("Intensification count summary")
summary=dcast(subset(df_intens,(pval<0.05 & (k>1 | k==999)))[,c('gene_id','branches')],gene_id~branches,value.var='gene_id',function(x) length(unique(x)) )
print(colSums(summary[,-1]))
d$SEED_level_1 <- factor(d$SEED_level_1, levels = levels(addNA(d$SEED_level_1)), labels = c(levels(d$SEED_level_1), 'NA'), exclude = NULL)
row.names(d)<-d$SEED_level_1
d=d[setdiff(colnames(d), c("gene_id",'SEED_level_2',"SEED_level_3","SEED_long_name"))]
#### 1) run hypergeometric test ####
pval<-run_multihypergeometric_tests(d)
#### 2) fisher test for overrepresentationof certain categories ####
breakdown<-run_fisher_tests2(d)
# bk<-plot_breakdown_with_counts2(breakdown,d)
#### Create dataframe for figure construction ####
core_lvl_order<-d[order(d$Core),]$SEED_level_1
core_lvl_order<-union(core_lvl_order[core_lvl_order!='NA'],'NA')
d$SEED_level_1 <- factor(d$SEED_level_1,levels = core_lvl_order)
# d$SEED_level_1 <- factor(d$SEED_level_1,levels = )
dat<-melt(d)
colnames(dat)[1]='categories'
colnames(dat)[2]='comp'
colnames(dat)[3]='count'
dat<-merge(breakdown,dat,by=c('categories','comp'),all=T)
dat$categories <- factor(dat$categories,levels =core_lvl_order)
dat$sign[dat$pvalue>=0.05] <- 'NS'
dat$symbol[is.na(dat$symbol)] <- ''
tot<-aggregate(count~comp,dat, function(x) sum(x))
colnames(tot)[2]='tot'
dat<-merge(dat,tot, by=c('comp'),all=T)
head(dat)
dput(levels(dat$comp))
dat$comp <- factor(dat$comp,levels = c( "Core", 'SymbAll','SymvsFL', 'RuvsFL','GivsFL', 'GivsRu'))
dat_intens<-dat
#### 2) fisher test for overrepresentationof certain categories ####
breakdown<-run_fisher_tests2(d)
core_lvl_order<-d[order(d$Core),]$SEED_level_1
core_lvl_order<-union(core_lvl_order[core_lvl_order!='NA'],'NA')
d$SEED_level_1 <- factor(d$SEED_level_1,levels = core_lvl_order)
dat<-melt(d)
colnames(dat)[1]='categories'
colnames(dat)[2]='comp'
colnames(dat)[3]='count'
dat<-merge(breakdown,dat,by=c('categories','comp'),all=T)
dat$categories <- factor(dat$categories,levels =core_lvl_order)
dat$sign[dat$pvalue>=0.05] <- 'NS'
dat$symbol[is.na(dat$symbol)] <- ''
tot<-aggregate(count~comp,dat, function(x) sum(x))
colnames(tot)[2]='tot'
dat<-merge(dat,tot, by=c('comp'),all=T)
head(dat)
dput(levels(dat$comp))
dat$comp <- factor(dat$comp,levels = c( "Core", 'SymbAll','SymvsFL', 'RuvsFL','GivsFL', 'GivsRu'))
dat_intens<-dat
dat<-dat_intens
merge(subset(dat_intens,comp=='SymvsFL'),subset(dat_relax,comp=='SymvsFL'),by=c('comp','categories'))
head(dat)
thresh2=50
t2<-subset(df_rel,SEED_level_1 %in% c('Sulfur Metabolism') & branches %in% c('SymbvsFL','GivsFL') & k>1 & pval<0.05) %>% .[!duplicated(.[,c('gene_id')]),]
t2
t4<-subset(df,SEED_level_1 %in% c('Sulfur Metabolism') & All>0 ) %>% .[!duplicated(.[,c('gene_id')]),]
t4
setwd("/Users/maeperez/Desktop/VesicSymb_Evolution/dowstream_analyses_and_data")
# setwd("../CRISPR_haplo/")
library(dplyr)
library(reshape2)
library(tidyr)
library(ggplot2)
library(plotly)
require(reshape)
library(devtools)
path_to_files='../mauve_alignments/bucky_results/'
```
# All genomes
## Get data
```{r}
prefix='a0.001'
nLCBs=793
pairs=read.table(paste0(path_to_files,prefix,'.pairs'),row.names=1)
head(pairs)
genes=read.table(paste0(path_to_files,prefix,'.input'),skip =2,nrows=nLCBs,sep="")
genes$V2<-strsplit(as.character(genes$V2),split="/") %>% sapply(., "[[", 2)
genes$V3<-gsub('.in','',genes$V2)
genes$V4<-substr(genes$V3,1,9)
colnames(genes)<-c('gene_no','file','nex','gene_id')
range_string = strsplit(genes$nex,split="_") %>% sapply(., "[[", 4)
genes$len<- as.numeric(strsplit(range_string,split="to") %>% sapply(., "[[", 2)) - as.numeric(strsplit(range_string,split="to") %>% sapply(., "[[", 1))
head(genes)
nrow(genes)
dat=genes
head(dat)
nrow(dat)
summary(dat)
ggplot(dat)+
geom_histogram(aes(x=len,y=..count..))+scale_x_log10()
ggplot(dat)+
geom_histogram(aes(x=len,y=..count..))+scale_x_log10()
```{r}
x=readLines(paste0(path_to_files,prefix,'.gene'))
closeAllConnections()
start <- grep("^Gene", x)
mark <- vector('integer', length(x))
mark[start] <- 1
# determine limits of each table
mark <- cumsum(mark)
# mark<-mark[1:302]
# split the data for reading
df <- lapply(split(x, mark), function(.data){
.input <- read.table(textConnection(.data), skip=2, header=TRUE)
attr(.input, 'name') <- .data[1]  # save the name
.input})
# rename the list
names(df) <- sapply(df, attr, 'name')
maxtopo=setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("index", "topology", "single", "joint",'gene_no'))
for(gene in names(df)){
gene_no=gsub('Gene ','',gene) %>% substr(.,1,nchar(.)-1)
subtable=as.data.frame(df[gene],col.names = '')
subtable=subtable[which.max(subtable$joint),] # looking for max prob in joint
subtable$gene_no=gene_no
maxtopo=rbind(maxtopo,subtable)
}
colnames(maxtopo)[1]='topo_index'
nrow(maxtopo)
table=merge(dat,maxtopo,by='gene_no',all.x=T)
head(table)
topo_len=aggregate(len~topo_index, table,FUN='sum')
totlen=sum(topo_len$len)
totlen # total length (in bp) of core LCBs > 100bp
topo_len=aggregate(len~topo_index, table,FUN='sum')
totlen=sum(topo_len$len)
totlen # total length (in bp) of core LCBs > 100bp
topo_len=aggregate(len~topo_index, table,FUN='sum')
totlen=sum(topo_len$len)
totlen # total length (in bp) of core LCBs > 100bp
```
## Get basic stats
133 trees were necessary to represent all LCBs topologies.
The fist 10 most common topologies represent ~1/4 of LCBs and 1/2 of core genome length
```{r}
aggregate(len~topo_index, table,FUN='sum',subset = gene_id %in% subset(table,topo_index<11)$gene_id %>% unique(.) )$len %>% sum # len in bp of genes represented by fist 10 topologies
aggregate(len~topo_index, table,FUN='sum',subset = gene_id %in% subset(table,topo_index<2)$gene_id %>% unique(.) )$len %>% sum # len in bp of genes represented by fist 10 topologies
aggregate(len~topo_index, table,FUN='sum',subset = gene_id %in% subset(table,topo_index<2)$gene_id %>% unique(.) )$len
aggregate(len~topo_index, table,FUN='sum',subset = gene_id %in% subset(table,topo_index<2)$gene_id
)
table
aggregate(len~topo_index, table,FUN='sum',subset = gene_id %in% subset(table,topo_index<11)$gene_id %>% unique(.) )
as.factor(table$topo_index) %>% unique %>% length
most.common.trees=summary(as.factor(table$topo_index)) %>% sort(.,decreasing = T) %>% data.frame(.) # sort topologies by number of represented LCBs represented by them (decreasing order)
colnames(most.common.trees)[1]='LCB_count' # # of LCB with that topology
most.common.trees$topo_index=row.names(most.common.trees)
most.common.trees$pgen=most.common.trees$LCB_count/nLCBs #pgen= LCB relative abundance
most.common.trees=most.common.trees[c(rownames(most.common.trees)[-1],rownames(most.common.trees)[1]),] # Place the "Others" category at the end as it lumps all the rare topologies
most.common.trees$cumsum=cumsum(most.common.trees$pgen) # LCB cumulative abundance
most.common.trees$n_gen=as.numeric(seq(1,nrow(most.common.trees))) # continuous axis
most.common.trees=merge(topo_len,most.common.trees,by='topo_index',all.y=T)
most.common.trees[1,'len']=totlen-sum(most.common.trees[-1,'len'])
most.common.trees=most.common.trees[c(rownames(most.common.trees)[-1],rownames(most.common.trees)[1]),] # sort dataframe again
most.common.trees$plen=most.common.trees$len/totlen
most.common.trees= most.common.trees[order(most.common.trees$plen, decreasing = T),]
rowlist=c(rownames(subset(most.common.trees, topo_index != '(Other)')),
rownames(subset(most.common.trees, topo_index == '(Other)')))
most.common.trees=most.common.trees[rowlist,]
most.common.trees$plencumsum=cumsum(as.numeric(most.common.trees$plen))
most.common.trees=most.common.trees[order(most.common.trees$n_gen),]
N50=most.common.trees[most.common.trees$cumsum>0.5,][1,'n_gen']
N75=most.common.trees[most.common.trees$cumsum>0.75,][1,'n_gen']
qplot(x=n_gen,y=cumsum,data=most.common.trees)+
geom_vline(xintercept = N50, color='red',size=1)+
geom_vline(xintercept = N75, color='green',size=1)+
theme_bw() # 45 topologies are necessary to represent 75% of the LCBs, 18 topologies are necessary to represent 50% of the LCBs
aggregate(len~topo_index, table,FUN='sum',subset = gene_id %in% subset(table,topo_index==0)$gene_id %>% unique(.) )$len %>% sum # len in bp of genes represented by fist 10 topologies
aggregate(len~topo_index, table,FUN='sum',subset = gene_id %in% subset(table,topo_index==0)$gene_id %>% unique(.) )
aggregate(len~topo_index, table,FUN='sum',subset = gene_id %in% subset(table,topo_index<1)$gene_id %>% unique(.) )$len %>% sum # len in bp of genes represented by fist 10 topologies
aggregate(len~topo_index, table,FUN='sum',subset = gene_id %in% subset(table,topo_index<1)$gene_id %>% unique(.) )
subset(table,topo_index<1)$gene_id
subset(table,topo_index<1)$gene_id %>% unique(.)
aggregate(len~topo_index, table,FUN='sum',subset = gene_id %in% subset(table,topo_index<1)$gene_id %>% unique(.) )
table
View(table)
par(mfrow=c(1,1))
ggplot(mds)+geom_histogram(aes(x=topo_index+0.01),binwidth = 10)+scale_y_log10()
subset(table,topo_index==0)
subset(table,topo_index==0)$topo_index
subset(table,topo_index==0)
subset(table,topo_index==0)$topology %>% unique()
tree.0 <- read.tree(subset(table,topo_index==0)$topology %>% unique())
library(ape)
tree.0 <- read.tree(subset(table,topo_index==0)$topology %>% unique())
tree.0 <- as.tree(subset(table,topo_index==0)$topology %>% unique())
tree.0 <- ape::read.tree(text = subset(table,topo_index==0)$topology %>% unique())
plot(tree.0)
tree.0$tip.label
apply(as.character,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17))
apply(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17),as.character)
apply(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17),FUN=as.character)
topo_leaves=as.character(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17))
topo_leaves
names(topo_leaves)=c('Bathy','R.fausta','R.magnifica','R.pacifica', 'R.phaseoliformis','R.pliocardia','R.rectimargo','R.southwardae','SUP05','V.diagonalis','V.extenta','V.gigas1','V.gigas2','V.marissinica','V.okutanii','V.soyoae1','V.soyoae2')
topo_leaves
RenumberTips(tree.0, topo_leaves)
ape::RenumberTips(tree.0, topo_leaves)
TreeTools::RenumberTips(tree.0, topo_leaves)
install.packages('treetools')
install.packages('‘TreeTools’')
tree$tip.label
tree.0$tip.label
topo_leaves[tree.0$tip.label]
topo_leaves=c('Bathy','R.fausta','R.magnifica','R.pacifica', 'R.phaseoliformis','R.pliocardia','R.rectimargo','R.southwardae','SUP05','V.diagonalis','V.extenta','V.gigas1','V.gigas2','V.marissinica','V.okutanii','V.soyoae1','V.soyoae2')
names(topo_leaves)=as.character(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17))
topo_leaves[tree.0$tip.label]
tree.0$tip.label<-topo_leaves[tree.0$tip.label]
tree.0$tip.label
plot(tree.0)
plot(plot(root(tree.0, 1)))
plot(plot(root(tree.0, c('SUP05','Bathy')))
)
plot(root(tree.0, c('SUP05','Bathy')))
tree.1 <- ape::read.tree(text = subset(table,topo_index==1)$topology %>% unique())
tree.1$tip.label<-topo_leaves[tree.1$tip.label]
plot(root(tree.1, c('SUP05','Bathy')))
most.common.trees
tree.7 <- ape::read.tree(text = subset(table,topo_index==7)$topology %>% unique())
tree.7$tip.label<-topo_leaves[tree.7$tip.label]
plot(root(tree.7, c('SUP05','Bathy')))
as.factor(table$topo_index) %>% unique %>% length
most.common.trees=summary(as.factor(table$topo_index)) %>% sort(.,decreasing = T) %>% data.frame(.) # sort topologies by number of represented LCBs represented by them (decreasing order)
colnames(most.common.trees)[1]='LCB_count' # # of LCB with that topology
most.common.trees$topo_index=row.names(most.common.trees)
most.common.trees$pgen=most.common.trees$LCB_count/nLCBs #pgen= LCB relative abundance
most.common.trees=most.common.trees[c(rownames(most.common.trees)[-1],rownames(most.common.trees)[1]),] # Place the "Others" category at the end as it lumps all the rare topologies
most.common.trees$cumsum=cumsum(most.common.trees$pgen) # LCB cumulative abundance
most.common.trees$n_gen=as.numeric(seq(1,nrow(most.common.trees))) # continuous axis
most.common.trees=merge(topo_len,most.common.trees,by='topo_index',all.y=T)
most.common.trees[1,'len']=totlen-sum(most.common.trees[-1,'len'])
most.common.trees=most.common.trees[c(rownames(most.common.trees)[-1],rownames(most.common.trees)[1]),] # sort dataframe again
most.common.trees$plen=most.common.trees$len/totlen
most.common.trees= most.common.trees[order(most.common.trees$plen, decreasing = T),]
rowlist=c(rownames(subset(most.common.trees, topo_index != '(Other)')),
rownames(subset(most.common.trees, topo_index == '(Other)')))
most.common.trees=most.common.trees[rowlist,]
most.common.trees$plencumsum=cumsum(as.numeric(most.common.trees$plen))
most.common.trees=most.common.trees[order(most.common.trees$n_gen),]
most.common.trees
tree.pop<-ape::read.tree(text = '(((((1,9),((((2,7),4),5),(3,(6,8)))),(((10,11),14),(12,13))),15),16,17);')
tree.pop$tip.label<-topo_leaves[tree.pop$tip.label]
plot(root(tree.pop, c('SUP05','Bathy')))
most.common.trees=summary(as.factor(table$topo_index)) %>% sort(.,decreasing = T) %>% data.frame(.) # sort topologies by number of represented LCBs represented by them (decreasing order)
colnames(most.common.trees)[1]='LCB_count' # # of LCB with that topology
most.common.trees$topo_index=row.names(most.common.trees)
most.common.trees$pgen=most.common.trees$LCB_count/nLCBs #pgen= LCB relative abundance
most.common.trees$cumsum=cumsum(most.common.trees$pgen) # LCB cumulative abundance
most.common.trees$n_gen=as.numeric(seq(1,nrow(most.common.trees))) # continuous axis
most.common.trees=merge(topo_len,most.common.trees,by='topo_index',all.y=T)
most.common.trees$plen=most.common.trees$len/totlen
most.common.trees= most.common.trees[order(most.common.trees$plen, decreasing = T),]
rowlist=c(rownames(subset(most.common.trees, topo_index != '(Other)')),
rownames(subset(most.common.trees, topo_index == '(Other)')))
most.common.trees=most.common.trees[rowlist,]
most.common.trees$plencumsum=cumsum(as.numeric(most.common.trees$plen))
most.common.trees=most.common.trees[order(most.common.trees$n_gen),]
N50=most.common.trees[most.common.trees$cumsum>0.5,][1,'n_gen']
N75=most.common.trees[most.common.trees$cumsum>0.75,][1,'n_gen']
qplot(x=n_gen,y=cumsum,data=most.common.trees)+
geom_vline(xintercept = N50, color='red',size=1)+
geom_vline(xintercept = N75, color='green',size=1)+
theme_bw() # 10 topologies are necessary to represent 75% of the LCBs, 4 topologies are necessary to represent 50% of the LCBs
most.common.trees= most.common.trees[order(most.common.trees$plencumsum),]
most.common.trees$n_len=seq(1,nrow(most.common.trees),)
most.common.trees=most.common.trees[order(most.common.trees$n_len),]
L50=most.common.trees[most.common.trees$plencumsum>0.5,][1,'n_len']
L75=most.common.trees[most.common.trees$plencumsum>0.75,][1,'n_len']
qplot(x=n_len,y=plencumsum,data=most.common.trees)+
geom_vline(xintercept = L50, color='red',size=1)+
geom_vline(xintercept = L75, color='green',size=1)+
theme_bw() # 8 topologies are necessary to represent 75% of the core genome length, 3 topologies are necessary to represent 50% of the core genome length
most.common.trees %>% head(LCB_count,n = 20)
qplot(x=plen,y=pgen,data=most.common.trees)+scale_y_log10()+scale_x_log10()
###
ggplot(subset(table, topo_index <5))+
geom_histogram(aes(x=topo_index+1))
prefix='a0.001_ruthia'
nLCBs=793
genes=read.table(paste0(path_to_files,prefix,'.input'),skip =2,nrows=nLCBs,sep="")
genes$V2<-strsplit(as.character(genes$V2),split="/") %>% sapply(., "[[", 2)
genes$V3<-gsub('.in','',genes$V2)
genes$V4<-substr(genes$V3,1,9)
colnames(genes)<-c('gene_no','file','nex','gene_id')
range_string = strsplit(genes$nex,split="_") %>% sapply(., "[[", 4)
genes$len<- as.numeric(strsplit(range_string,split="to") %>% sapply(., "[[", 2)) - as.numeric(strsplit(range_string,split="to") %>% sapply(., "[[", 1))
head(genes)
nrow(genes)
dat=genes
head(dat)
nrow(dat)
summary(dat)
ggplot(dat)+
geom_histogram(aes(x=len,y=..count..))+scale_x_log10()
ggplot(dat)+
geom_histogram(aes(x=len,y=..count..))+scale_x_log10()
```{r}
x=readLines(paste0(path_to_files,prefix,'.gene'))
closeAllConnections()
start <- grep("^Gene", x)
mark <- vector('integer', length(x))
mark[start] <- 1
# determine limits of each table
mark <- cumsum(mark)
# mark<-mark[1:302]
# split the data for reading
df <- lapply(split(x, mark), function(.data){
.input <- read.table(textConnection(.data), skip=2, header=TRUE)
attr(.input, 'name') <- .data[1]  # save the name
.input})
# rename the list
names(df) <- sapply(df, attr, 'name')
maxtopo=setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("index", "topology", "single", "joint",'gene_no'))
for(gene in names(df)){
gene_no=gsub('Gene ','',gene) %>% substr(.,1,nchar(.)-1)
subtable=as.data.frame(df[gene],col.names = '')
subtable=subtable[which.max(subtable$joint),] # looking for max prob in joint
subtable$gene_no=gene_no
maxtopo=rbind(maxtopo,subtable)
}
colnames(maxtopo)[1]='topo_index'
nrow(maxtopo)
table=merge(dat,maxtopo,by='gene_no',all.x=T)
head(table)
topo_len=aggregate(len~topo_index, table,FUN='sum')
totlen=sum(topo_len$len)
totlen # total length (in bp) of core LCBs > 100bp
topo_len=aggregate(len~topo_index, table,FUN='sum')
totlen=sum(topo_len$len)
totlen # total length (in bp) of core LCBs > 100bp
## Get basic stats
A total of 36 different topologies are necessary to represent all LCBs
10 topologies are necessary to represent 75% of the LCBs, 4 topologies are necessary to represent 50% of the LCBs
```{r}
most.common.trees=summary(as.factor(table$topo_index)) %>% sort(.,decreasing = T) %>% data.frame(.) # sort topologies by number of represented LCBs represented by them (decreasing order)
colnames(most.common.trees)[1]='LCB_count' # # of LCB with that topology
most.common.trees$topo_index=row.names(most.common.trees)
most.common.trees$pgen=most.common.trees$LCB_count/nLCBs #pgen= LCB relative abundance
most.common.trees$cumsum=cumsum(most.common.trees$pgen) # LCB cumulative abundance
most.common.trees$n_gen=as.numeric(seq(1,nrow(most.common.trees))) # continuous axis
most.common.trees=merge(topo_len,most.common.trees,by='topo_index',all.y=T)
most.common.trees$plen=most.common.trees$len/totlen
most.common.trees= most.common.trees[order(most.common.trees$plen, decreasing = T),]
rowlist=c(rownames(subset(most.common.trees, topo_index != '(Other)')),
rownames(subset(most.common.trees, topo_index == '(Other)')))
most.common.trees=most.common.trees[rowlist,]
most.common.trees$plencumsum=cumsum(as.numeric(most.common.trees$plen))
most.common.trees=most.common.trees[order(most.common.trees$n_gen),]
N50=most.common.trees[most.common.trees$cumsum>0.5,][1,'n_gen']
N75=most.common.trees[most.common.trees$cumsum>0.75,][1,'n_gen']
qplot(x=n_gen,y=cumsum,data=most.common.trees)+
geom_vline(xintercept = N50, color='red',size=1)+
geom_vline(xintercept = N75, color='green',size=1)+
theme_bw() # 10 topologies are necessary to represent 75% of the LCBs, 4 topologies are necessary to represent 50% of the LCBs
most.common.trees= most.common.trees[order(most.common.trees$plencumsum),]
most.common.trees$n_len=seq(1,nrow(most.common.trees),)
most.common.trees=most.common.trees[order(most.common.trees$n_len),]
L50=most.common.trees[most.common.trees$plencumsum>0.5,][1,'n_len']
L75=most.common.trees[most.common.trees$plencumsum>0.75,][1,'n_len']
L75
L50
qplot(x=n_len,y=plencumsum,data=most.common.trees)+
geom_vline(xintercept = L50, color='red',size=1)+
geom_vline(xintercept = L75, color='green',size=1)+
theme_bw() # 8 topologies are necessary to represent 75% of the core genome length, 3 topologies are necessary to represent 50% of the core genome length
prefix='a0.001_gigas'
nLCBs=793
genes=read.table(paste0(path_to_files,prefix,'.input'),skip =2,nrows=nLCBs,sep="")
genes$V2<-strsplit(as.character(genes$V2),split="/") %>% sapply(., "[[", 2)
genes$V3<-gsub('.in','',genes$V2)
genes$V4<-substr(genes$V3,1,9)
colnames(genes)<-c('gene_no','file','nex','gene_id')
range_string = strsplit(genes$nex,split="_") %>% sapply(., "[[", 4)
genes$len<- as.numeric(strsplit(range_string,split="to") %>% sapply(., "[[", 2)) - as.numeric(strsplit(range_string,split="to") %>% sapply(., "[[", 1))
head(genes)
nrow(genes)
dat=genes
head(dat)
nrow(dat)
summary(dat)
ggplot(dat)+
geom_histogram(aes(x=len,y=..count..))+scale_x_log10()
ggplot(dat)+
geom_histogram(aes(x=len,y=..count..))+scale_x_log10()
```{r}
x=readLines(paste0(path_to_files,prefix,'.gene'))
closeAllConnections()
start <- grep("^Gene", x)
mark <- vector('integer', length(x))
mark[start] <- 1
# determine limits of each table
mark <- cumsum(mark)
# mark<-mark[1:302]
# split the data for reading
df <- lapply(split(x, mark), function(.data){
.input <- read.table(textConnection(.data), skip=2, header=TRUE)
attr(.input, 'name') <- .data[1]  # save the name
.input})
# rename the list
names(df) <- sapply(df, attr, 'name')
maxtopo=setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("index", "topology", "single", "joint",'gene_no'))
for(gene in names(df)){
gene_no=gsub('Gene ','',gene) %>% substr(.,1,nchar(.)-1)
subtable=as.data.frame(df[gene],col.names = '')
subtable=subtable[which.max(subtable$joint),] # looking for max prob in joint
subtable$gene_no=gene_no
maxtopo=rbind(maxtopo,subtable)
}
colnames(maxtopo)[1]='topo_index'
nrow(maxtopo)
table=merge(dat,maxtopo,by='gene_no',all.x=T)
head(table)
table$topo_index %>% unique # 11 different topologies in total
topo_len=aggregate(len~topo_index, table,FUN='sum')
totlen=sum(topo_len$len)
totlen # total length (in bp) of core LCBs > 100bp
topo_len=aggregate(len~topo_index, table,FUN='sum')
totlen=sum(topo_len$len)
totlen # total length (in bp) of core LCBs > 100bp
## Get basic stats
A total of 11 different topologies are necessary to represent all LCBs
4 topologies are necessary to represent 75% of the LCBs, 2 topologies are necessary to represent 50% of the LCBs
```{r}
most.common.trees=summary(as.factor(table$topo_index)) %>% sort(.,decreasing = T) %>% data.frame(.) # sort topologies by number of represented LCBs represented by them (decreasing order)
colnames(most.common.trees)[1]='LCB_count' # # of LCB with that topology
most.common.trees$topo_index=row.names(most.common.trees)
most.common.trees$pgen=most.common.trees$LCB_count/nLCBs #pgen= LCB relative abundance
most.common.trees$cumsum=cumsum(most.common.trees$pgen) # LCB cumulative abundance
most.common.trees$n_gen=as.numeric(seq(1,nrow(most.common.trees))) # continuous axis
most.common.trees=merge(topo_len,most.common.trees,by='topo_index',all.y=T)
most.common.trees$plen=most.common.trees$len/totlen
most.common.trees= most.common.trees[order(most.common.trees$plen, decreasing = T),]
rowlist=c(rownames(subset(most.common.trees, topo_index != '(Other)')),
rownames(subset(most.common.trees, topo_index == '(Other)')))
most.common.trees=most.common.trees[rowlist,]
most.common.trees$plencumsum=cumsum(as.numeric(most.common.trees$plen))
most.common.trees=most.common.trees[order(most.common.trees$n_gen),]
N50=most.common.trees[most.common.trees$cumsum>0.5,][1,'n_gen']
N75=most.common.trees[most.common.trees$cumsum>0.75,][1,'n_gen']
qplot(x=n_gen,y=cumsum,data=most.common.trees)+
geom_vline(xintercept = N50, color='red',size=1)+
geom_vline(xintercept = N75, color='green',size=1)+
theme_bw() # 4 topologies are necessary to represent all of the LCBs, 2 topologies are necessary to represent 50% of the LCBs
N75
N50
most.common.trees= most.common.trees[order(most.common.trees$plencumsum),]
most.common.trees$n_len=seq(1,nrow(most.common.trees),)
most.common.trees=most.common.trees[order(most.common.trees$n_len),]
L50=most.common.trees[most.common.trees$plencumsum>0.5,][1,'n_len']
L75=most.common.trees[most.common.trees$plencumsum>0.75,][1,'n_len']
qplot(x=n_len,y=plencumsum,data=most.common.trees)+
geom_vline(xintercept = L50, color='red',size=1)+
geom_vline(xintercept = L75, color='green',size=1)+
theme_bw() # 8 topologies are necessary to represent 75% of the core genome length, 3 topologies are necessary to represent 50% of the core genome length
L75
L50=most.common.trees[most.common.trees$plencumsum>0.5,][1,'n_len']
L50
most.common.trees %>% head(LCB_count,n = 20)
qplot(x=plen,y=pgen,data=most.common.trees)+scale_y_log10()+scale_x_log10()
###
ggplot(subset(table, topo_index <5))+
geom_histogram(aes(x=topo_index+1))
